.TH "edgelab" 3 "Sun Sep 17 2023" "Version v2023.09.15" "SSCMA-Micro CPP SDK" \" -*- nroff -*-
.ad l
.nh
.SH NAME
edgelab
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBbase\fP"
.br
.ti -1c
.RI " \fBconstants\fP"
.br
.ti -1c
.RI " \fBtypes\fP"
.br
.ti -1c
.RI " \fButility\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBAlgorithmDelegate\fP"
.br
.ti -1c
.RI "class \fBAlgorithmFOMO\fP"
.br
.ti -1c
.RI "class \fBAlgorithmIMCLS\fP"
.br
.ti -1c
.RI "class \fBAlgorithmPFLD\fP"
.br
.ti -1c
.RI "class \fBAlgorithmYOLO\fP"
.br
.ti -1c
.RI "class \fBModels\fP"
.br
.ti -1c
.RI "class \fBStorage\fP"
.br
.ti -1c
.RI "class \fBEngineTFLite\fP"
.br
.ti -1c
.RI "class \fBGuard\fP"
.br
.ti -1c
.RI "class \fBMutex\fP"
.br
.ti -1c
.RI "class \fBCamera\fP"
.br
.ti -1c
.RI "class \fBDevice\fP"
.br
.ti -1c
.RI "class \fBDisplay\fP"
.br
.ti -1c
.RI "class \fBSerial\fP"
.br
.ti -1c
.RI "class \fBTransport\fP"
.br
.ti -1c
.RI "class \fBCameraEsp\fP"
.br
.ti -1c
.RI "class \fBDeviceEsp\fP"
.br
.ti -1c
.RI "class \fBDisplayEsp\fP"
.br
.ti -1c
.RI "class \fBSerialEsp\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "using \fBAlgorithm\fP = class \fBbase::Algorithm\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBel_base64_encode_output\fP (const unsigned char *in, int in_len, int(*putc_func)(int))"
.br
.ti -1c
.RI "void \fBel_base64_encode\fP (const unsigned char *in, int in_len, char *out)"
.br
.ti -1c
.RI "EL_ATTR_WEAK void \fByuv422p_to_rgb\fP (const \fBel_img_t\fP *src, \fBel_img_t\fP *dst)"
.br
.ti -1c
.RI "EL_ATTR_WEAK void \fBrgb888_to_rgb888\fP (const \fBel_img_t\fP *src, \fBel_img_t\fP *dst)"
.br
.ti -1c
.RI "EL_ATTR_WEAK void \fBrgb888_to_rgb565\fP (const \fBel_img_t\fP *src, \fBel_img_t\fP *dst)"
.br
.ti -1c
.RI "EL_ATTR_WEAK void \fBrgb888_to_gray\fP (const \fBel_img_t\fP *src, \fBel_img_t\fP *dst)"
.br
.ti -1c
.RI "EL_ATTR_WEAK void \fBrgb565_to_rgb888\fP (const \fBel_img_t\fP *src, \fBel_img_t\fP *dst)"
.br
.ti -1c
.RI "EL_ATTR_WEAK void \fBrgb565_to_rgb565\fP (const \fBel_img_t\fP *src, \fBel_img_t\fP *dst)"
.br
.ti -1c
.RI "EL_ATTR_WEAK void \fBrgb565_to_gray\fP (const \fBel_img_t\fP *src, \fBel_img_t\fP *dst)"
.br
.ti -1c
.RI "EL_ATTR_WEAK void \fBgray_to_rgb888\fP (const \fBel_img_t\fP *src, \fBel_img_t\fP *dst)"
.br
.ti -1c
.RI "EL_ATTR_WEAK void \fBgray_to_rgb565\fP (const \fBel_img_t\fP *src, \fBel_img_t\fP *dst)"
.br
.ti -1c
.RI "EL_ATTR_WEAK void \fBgray_to_gray\fP (const \fBel_img_t\fP *src, \fBel_img_t\fP *dst)"
.br
.ti -1c
.RI "EL_ATTR_WEAK void \fBrgb_to_rgb\fP (const \fBel_img_t\fP *src, \fBel_img_t\fP *dst)"
.br
.ti -1c
.RI "EL_ATTR_WEAK \fBel_err_code_t\fP \fBrgb_to_jpeg\fP (const \fBel_img_t\fP *src, \fBel_img_t\fP *dst)"
.br
.ti -1c
.RI "EL_ATTR_WEAK \fBel_err_code_t\fP \fBel_img_convert\fP (const \fBel_img_t\fP *src, \fBel_img_t\fP *dst)"
.br
.ti -1c
.RI "EL_ATTR_WEAK void \fBel_draw_point\fP (\fBel_img_t\fP *img, int16_t x, int16_t y, uint32_t color)"
.br
.ti -1c
.RI "EL_ATTR_WEAK void \fBel_fill_rect\fP (\fBel_img_t\fP *img, int16_t x, int16_t y, int16_t w, int16_t h, uint32_t color)"
.br
.ti -1c
.RI "EL_ATTR_WEAK void \fBel_draw_h_line\fP (\fBel_img_t\fP *img, int16_t x0, int16_t x1, int16_t y, uint32_t color)"
.br
.ti -1c
.RI "EL_ATTR_WEAK void \fBel_draw_v_line\fP (\fBel_img_t\fP *img, int16_t x, int16_t y0, int16_t y1, uint32_t color)"
.br
.ti -1c
.RI "EL_ATTR_WEAK void \fBel_draw_rect\fP (\fBel_img_t\fP *img, int16_t x, int16_t y, int16_t w, int16_t h, uint32_t color, uint8_t thickness)"
.br
.ti -1c
.RI "EL_ATTR_WEAK uint16_t \fBel_crc16_maxim\fP (const uint8_t *data, size_t length)"
.br
.ti -1c
.RI "bool \fBbox_comparator_sort\fP (const \fBel_box_t\fP &box1, const \fBel_box_t\fP &box2)"
.br
.ti -1c
.RI "uint8_t \fBcompute_iou\fP (const \fBel_box_t\fP &box1, const \fBel_box_t\fP &box2)"
.br
.ti -1c
.RI "EL_ATTR_WEAK int \fBel_nms\fP (std::forward_list< \fBel_box_t\fP > &boxes, uint8_t nms_iou_thresh, uint8_t nms_score_thresh, bool soft_nms, bool multi_target)"
.br
.ti -1c
.RI "void \fBel_sleep\fP (uint32_t ms)"
.br
.ti -1c
.RI "uint64_t \fBel_get_time_ms\fP (void)"
.br
.ti -1c
.RI "uint64_t \fBel_get_time_us\fP (void)"
.br
.ti -1c
.RI "void * \fBel_malloc\fP (size_t size)"
.br
.ti -1c
.RI "void * \fBel_calloc\fP (size_t nmemb, size_t size)"
.br
.ti -1c
.RI "void \fBel_free\fP (void *ptr)"
.br
.ti -1c
.RI "int \fBel_printf\fP (const char *format,\&.\&.\&.)"
.br
.ti -1c
.RI "int \fBel_putchar\fP (char c)"
.br
.ti -1c
.RI "size_t \fBel_getline\fP (char **lineptr, size_t *n, FILE *stream)"
.br
.ti -1c
.RI "void \fBel_reset\fP (void)"
.br
.ti -1c
.RI "void \fBel_status_led\fP (bool on)"
.br
.ti -1c
.RI "\fBel_err_code_t\fP \fBel_model_partition_mmap_init\fP (const char *partition_name, uint32_t *partition_start_addr, uint32_t *partition_size, const uint8_t **flash_2_memory_map, spi_flash_mmap_handle_t *mmap_handler)"
.br
.ti -1c
.RI "void \fBel_model_partition_mmap_deinit\fP (spi_flash_mmap_handle_t *mmap_handler)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const struct fal_flash_dev \fBel_flash_db_nor_flash0\fP"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "using \fBedgelab::Algorithm\fP = typedef class \fBbase::Algorithm\fP"

.SH "Function Documentation"
.PP 
.SS "bool edgelab::box_comparator_sort (const \fBel_box_t\fP & box1, const \fBel_box_t\fP & box2)"

.SS "uint8_t edgelab::compute_iou (const \fBel_box_t\fP & box1, const \fBel_box_t\fP & box2)"

.SS "void edgelab::el_base64_encode (const unsigned char * in, int in_len, char * out)"

.SS "void edgelab::el_base64_encode_output (const unsigned char * in, int in_len, int(*)(int) putc_func)"

.SS "EL_ATTR_WEAK void * edgelab::el_calloc (size_t nmemb, size_t size)"

.SS "uint16_t edgelab::el_crc16_maxim (const uint8_t * data, size_t length)"

.SS "void edgelab::el_draw_h_line (\fBel_img_t\fP * img, int16_t x0, int16_t x1, int16_t y, uint32_t color)"

.SS "void edgelab::el_draw_point (\fBel_img_t\fP * img, int16_t x, int16_t y, uint32_t color)"

.SS "void edgelab::el_draw_rect (\fBel_img_t\fP * img, int16_t x, int16_t y, int16_t w, int16_t h, uint32_t color, uint8_t thickness)"

.SS "void edgelab::el_draw_v_line (\fBel_img_t\fP * img, int16_t x, int16_t y0, int16_t y1, uint32_t color)"

.SS "void edgelab::el_fill_rect (\fBel_img_t\fP * img, int16_t x, int16_t y, int16_t w, int16_t h, uint32_t color)"

.SS "EL_ATTR_WEAK void edgelab::el_free (void * ptr)"

.SS "EL_ATTR_WEAK uint64_t edgelab::el_get_time_ms (void)"

.SS "EL_ATTR_WEAK uint64_t edgelab::el_get_time_us (void)"

.SS "size_t edgelab::el_getline (char ** lineptr, size_t * n, FILE * stream)"

.SS "\fBel_err_code_t\fP edgelab::el_img_convert (const \fBel_img_t\fP * src, \fBel_img_t\fP * dst)"

.SS "EL_ATTR_WEAK void * edgelab::el_malloc (size_t size)"

.SS "void edgelab::el_model_partition_mmap_deinit (spi_flash_mmap_handle_t * mmap_handler)"

.SS "\fBel_err_code_t\fP edgelab::el_model_partition_mmap_init (const char * partition_name, uint32_t * partition_start_addr, uint32_t * partition_size, const uint8_t ** flash_2_memory_map, spi_flash_mmap_handle_t * mmap_handler)"

.SS "int edgelab::el_nms (std::forward_list< \fBel_box_t\fP > & boxes, uint8_t nms_iou_thresh, uint8_t nms_score_thresh, bool soft_nms, bool multi_target)"

.SS "EL_ATTR_WEAK int edgelab::el_printf (const char * format,  \&.\&.\&.)"

.SS "EL_ATTR_WEAK int edgelab::el_putchar (char c)"

.SS "EL_ATTR_WEAK void edgelab::el_reset (void)"

.SS "EL_ATTR_WEAK void edgelab::el_sleep (uint32_t ms)"

.SS "EL_ATTR_WEAK void edgelab::el_status_led (bool on)"

.SS "EL_ATTR_WEAK void edgelab::gray_to_gray (const \fBel_img_t\fP * src, \fBel_img_t\fP * dst)"

.SS "EL_ATTR_WEAK void edgelab::gray_to_rgb565 (const \fBel_img_t\fP * src, \fBel_img_t\fP * dst)"

.SS "EL_ATTR_WEAK void edgelab::gray_to_rgb888 (const \fBel_img_t\fP * src, \fBel_img_t\fP * dst)"

.SS "EL_ATTR_WEAK void edgelab::rgb565_to_gray (const \fBel_img_t\fP * src, \fBel_img_t\fP * dst)"

.SS "EL_ATTR_WEAK void edgelab::rgb565_to_rgb565 (const \fBel_img_t\fP * src, \fBel_img_t\fP * dst)"

.SS "EL_ATTR_WEAK void edgelab::rgb565_to_rgb888 (const \fBel_img_t\fP * src, \fBel_img_t\fP * dst)"

.SS "EL_ATTR_WEAK void edgelab::rgb888_to_gray (const \fBel_img_t\fP * src, \fBel_img_t\fP * dst)"

.SS "EL_ATTR_WEAK void edgelab::rgb888_to_rgb565 (const \fBel_img_t\fP * src, \fBel_img_t\fP * dst)"

.SS "EL_ATTR_WEAK void edgelab::rgb888_to_rgb888 (const \fBel_img_t\fP * src, \fBel_img_t\fP * dst)"

.SS "EL_ATTR_WEAK \fBel_err_code_t\fP edgelab::rgb_to_jpeg (const \fBel_img_t\fP * src, \fBel_img_t\fP * dst)"

.SS "EL_ATTR_WEAK void edgelab::rgb_to_rgb (const \fBel_img_t\fP * src, \fBel_img_t\fP * dst)"

.SS "EL_ATTR_WEAK void edgelab::yuv422p_to_rgb (const \fBel_img_t\fP * src, \fBel_img_t\fP * dst)"

.SH "Variable Documentation"
.PP 
.SS "const struct fal_flash_dev edgelab::el_flash_db_nor_flash0"
\fBInitial value:\fP
.PP
.nf
= {
  \&.name       =  CONFIG_EL_STORAGE_PARTITION_MOUNT_POINT ,
  \&.addr       = 0x0,
  \&.len        = 192 * 1024,
  \&.blk_size   =  (8 * 1024) ,
  \&.ops        = {el_flash_db_init, el_flash_db_read, el_flash_db_write, el_flash_db_erase},
  \&.write_gran =  (1) ,
}
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for SSCMA-Micro CPP SDK from the source code\&.
